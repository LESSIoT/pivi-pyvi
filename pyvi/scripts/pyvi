# vim: set ft=python:

import threading
import Queue
import signal
import sys

from pyvi import TestTransport
from pyvi import UdpTransport
from pyvi import MCUComm
from pyvi import ServerComm


class ThreadSerial(threading.Thread):

    def __init__(self):
        """
        """
        super(ThreadSerial, self).__init__()
        self.port = TestTransport(True)
        self.prot = MCUComm()
        self.running = False

    def run(self):
        self.running = True
        while(self.running):
            pkg = self.port.read_package_from_xmega()
            if pkg is not None:
                m = self.prot.read(pkg)
                if not measurements.full():
                    measurements.put(m, timeout=0.1)

    def kill(self):
        self.running = False


class ThreadUdp(threading.Thread):

    def __init__(self):
        """
        """
        super(ThreadUdp, self).__init__()
        settings = {'server': 'localhost:9000'}
        self.port = UdpTransport()
        self.port.open(settings)
        self.prot = ServerComm()
        self.running = False

    def run(self):
        self.running = True
        while(self.running):
            try:
                m = measurements.get(timeout=0.1)
            except Queue.Empty:
                print 'No meassages in the queue.'
                continue
            if m is not None:
                pkg = self.prot.pack(m)
                self.port.write(pkg)

    def kill(self):
        self.running = False

if __name__ == '__main__':
    measurements = Queue.Queue(maxsize=100)
    serial = ThreadSerial()
    udp = ThreadUdp()

    def sig_handler(signum, frame):
        print 'Stopping the program'
        serial.kill()
        udp.kill()
        serial.join()
        udp.join()
        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    serial.start()
    udp.start()
