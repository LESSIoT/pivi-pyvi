# vim: set ft=python:

import threading
import Queue
import signal
import sys

from pyvi import SerialTransport
from pyvi import TestTransport
from pyvi import UdpTransport
from pyvi import MCUComm
from pyvi import ServerComm


class ThreadSerial(threading.Thread):

    def __init__(self, test=False):
        """
        """
        super(ThreadSerial, self).__init__()
        settings = {'port': '/dev/ttyUSB0',
                    'baudrate': 115200,
                    'timeout': 0}
        if test is True:
            self.test = True
            self.port = TestTransport(True)
        else:
            self.test = False
            self.port = SerialTransport()
        self.port.open(settings)
        self.prot = MCUComm()
        self.running = False

    def run(self):
        self.running = True
        while(self.running):
            pkg = self.port.read_package_from_xmega()
            if pkg is not None:
                m = self.prot.read(pkg)
                if not measurements.full():
                    measurements.put(m, timeout=0.1)
            if self.test:
                import time
                time.sleep(2)

    def kill(self):
        self.running = False


class ThreadUdp(threading.Thread):

    def __init__(self):
        """
        """
        super(ThreadUdp, self).__init__()
        settings = {'server': 'localhost:9000'}
        self.port = UdpTransport()
        self.port.open(settings)
        self.prot = ServerComm()
        self.running = False

    def run(self):
        self.running = True
        while(self.running):
            try:
                m = measurements.get(timeout=0.1)
            except Queue.Empty:
                continue
            if m is not None:
                print m
                pkg = self.prot.pack(m)
                self.port.write(pkg)

    def kill(self):
        self.running = False

if __name__ == '__main__':
    measurements = Queue.Queue(maxsize=100)

    if len(sys.argv) == 2 and sys.argv[1] == "--virtual":
        virtual = True
    else:
        virtual = False
    serial = ThreadSerial(virtual)

    udp = ThreadUdp()

    def sig_handler(signum, frame):
        print 'Stopping the program'
        serial.kill()
        udp.kill()
        serial.join()
        udp.join()
        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    serial.start()
    udp.start()
